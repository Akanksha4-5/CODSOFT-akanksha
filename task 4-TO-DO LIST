#include <iostream>
#include <vector>
#include <string>

using namespace std;

vector<string> tasks;
vector<bool> status; // false = pending, true = completed


void addTask() {
    string task;
    cout << "Enter task: ";
    cin.ignore(); // Clear newline from buffer
    getline(cin, task);
    tasks.push_back(task);
    status.push_back(false);
    cout << "Task added successfully.\n";
}


void viewTasks() {
    if (tasks.empty()) {
        cout << "No tasks available.\n";
        return;
    }

    cout << "\nYour Tasks:\n";
    for (int i = 0; i < tasks.size(); ++i) {
        cout << i + 1 << ". " << tasks[i]
             << " [" << (status[i] ? "Completed" : "Pending") << "]\n";
    }
}


void markTaskCompleted() {
    if (tasks.empty()) {
        cout << "No tasks to complete.\n";
        return;
    }

    viewTasks();
    int index;
    cout << "Enter task number to mark as completed: ";
    cin >> index;
    if (index >= 1 && index <= tasks.size()) {
        status[index - 1] = true;
        cout << "Task marked as completed.\n";
    } else {
        cout << "Invalid task number.\n";
    }
}


void deleteTask() {
    if (tasks.empty()) {
        cout << "No tasks to delete.\n";
        return;
    }

    viewTasks();
    int index;
    cout << "Enter task number to delete: ";
    cin >> index;
    if (index >= 1 && index <= tasks.size()) {
        tasks.erase(tasks.begin() + index - 1);
        status.erase(status.begin() + index - 1);
        cout << "Task deleted successfully.\n";
    } else {
        cout << "Invalid task number.\n";
    }
}

int main() {
    int choice;

    while (true) {
        cout << "\n Simple To-Do List \n";
        cout << "1. Add Task\n";
        cout << "2. View Tasks\n";
        cout << "3. Mark Task as Completed\n";
        cout << "4. Delete Task\n";
        cout << "5. Exit\n";
        cout << "Choose an option: ";
        cin >> choice;

        switch (choice) {
            case 1: addTask(); break;
            case 2: viewTasks(); break;
            case 3: markTaskCompleted(); break;
            case 4: deleteTask(); break;
            case 5: cout << "Exiting...\n"; return 0;
            default: cout << "Invalid choice. Try again.\n";
        }
    }

    return 0;
}


output:
Simple To-Do List 
1. Add Task
2. View Tasks
3. Mark Task as Completed
4. Delete Task
5. Exit
Choose an option: 1
Enter task: abc
Task added successfully.

 Simple To-Do List 
1. Add Task
2. View Tasks
3. Mark Task as Completed
4. Delete Task
5. Exit
Choose an option: 2

Your Tasks:
1. abc [Pending]

 Simple To-Do List 
1. Add Task
2. View Tasks
3. Mark Task as Completed
4. Delete Task
5. Exit
Choose an option: 3

Your Tasks:
1. abc [Pending]
Enter task number to mark as completed: 1
Task marked as completed.

 Simple To-Do List 
1. Add Task
2. View Tasks
3. Mark Task as Completed
4. Delete Task
5. Exit
Choose an option: 2

Your Tasks:
1. abc [Completed]

 Simple To-Do List 
1. Add Task
2. View Tasks
3. Mark Task as Completed
4. Delete Task
5. Exit
Choose an option: 4

Your Tasks:
1. abc [Completed]
Enter task number to delete: 1
Task deleted successfully.

 Simple To-Do List 
1. Add Task
2. View Tasks
3. Mark Task as Completed
4. Delete Task
5. Exit
Choose an option: 2
No tasks available.

 Simple To-Do List 
1. Add Task
2. View Tasks
3. Mark Task as Completed
4. Delete Task
5. Exit
Choose an option: 5
Exiting...


=== Code Execution Successful ===
